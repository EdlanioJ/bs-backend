// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  EMPLOYEE
  MANAGER
  USER
  ADMIN
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String
  avatar       String
  provider     String?
  role         Role     @default(USER)
  thirdPartyId String   @unique @map("third_party_id")
  refreshToken String?  @map("refresh_token")
  createdAt    DateTime @default(now()) @map("created_at")

  appointmentsFrom Appointment[]    @relation("AppointmentFrom")
  appointmentsTo   Appointment[]    @relation("AppointmentTo")
  templates        Template[]       @relation("Template")
  serviceProvicer  ServiceProvider? @relation("Provider")

  connectionToProvider ProviderEmployeeConnection?         @relation("ConnectionToProvider")
  connectionRequest    ProviderEmployeeConnectionRequest[] @relation("ConnectionRequest")
  managerRequest       ManagerRequest?                     @relation("ManagerRequest")

  manager      Manager?  @relation("Manager")
  authorizedBy Manager[] @relation("AuthorizedBy")

  @@map("users")
}

enum ManagerRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model ManagerRequest {
  id        String               @id @default(auto()) @map("_id") @db.ObjectId
  status    ManagerRequestStatus @default(PENDING) @map("status")
  createdAt DateTime             @default(now()) @map("created_at")

  user   User   @relation("ManagerRequest", fields: [userId], references: [id])
  userId String @unique @map("user_id")

  rejectReason String? @map("reject_reason")

  rejectBy   Manager? @relation("RejectBy", fields: [rejectById], references: [id])
  rejectById String   @map("reject_by_id") @db.ObjectId

  @@map("manager_requests")
}

model Manager {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation("Manager", fields: [userId], references: [id])
  userId String @unique @map("user_id")

  authorizedBy   User   @relation("AuthorizedBy", fields: [authorizedById], references: [id])
  authorizedById String @map("authorized_by_id")

  managerRequest ManagerRequest[] @relation("RejectBy")
  @@map("managers")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Appointment {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  start          DateTime          @map("start_time")
  end            DateTime          @map("end_time")
  status         AppointmentStatus @default(PENDING)
  canceled       DateTime?         @map("canceled_at")
  canceledReason String?           @map("canceled_reason")
  createdAt      DateTime          @default(now()) @map("created_at")

  employee   User   @relation("AppointmentTo", fields: [employeeId], references: [id])
  employeeId String @map("employee_id") @db.ObjectId
  customer   User   @relation("AppointmentFrom", fields: [customerId], references: [id])
  customerId String @map("custumer_id") @db.ObjectId

  service   Service @relation("Service", fields: [serviceId], references: [id])
  serviceId String  @map("service_id") @db.ObjectId

  @@map("appointments")
}

model ServiceProvider {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation("Provider", fields: [userId], references: [id])
  userId String @unique @map("user_id") @db.ObjectId

  services Service[] @relation("ServiceProvider")

  connectionToEmployees ProviderEmployeeConnection[]        @relation("ConnectionToEmployees")
  connectionRequest     ProviderEmployeeConnectionRequest[] @relation("ConnectionRequestToProvider")

  @@map("services_provider")
}

model Service {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  appointmentDuration Int @default(60) @map("appointment_duration")

  provider   ServiceProvider @relation("ServiceProvider", fields: [providerId], references: [id])
  providerId String          @unique @map("provider_id") @db.ObjectId

  appointments Appointment[] @relation("Service")

  @@map("services")
}

enum ConnectionRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model ProviderEmployeeConnectionRequest {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  status    ConnectionRequestStatus @default(PENDING)
  createdAt DateTime                @default(now()) @map("created_at")

  provider   ServiceProvider @relation("ConnectionRequestToProvider", fields: [providerId], references: [id])
  providerId String          @map("provider_id") @db.ObjectId

  employee   User   @relation("ConnectionRequest", fields: [employeeId], references: [id])
  employeeId String @map("employee_id") @db.ObjectId

  @@map("connection_request_to_provider")
}

model ProviderEmployeeConnection {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")

  provider   ServiceProvider @relation("ConnectionToEmployees", fields: [providerId], references: [id])
  providerId String          @map("provider_id") @db.ObjectId

  user   User   @relation("ConnectionToProvider", fields: [userId], references: [id])
  userId String @unique @map("user_id") @db.ObjectId

  @@map("connection_provider")
}

model Template {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String   @unique
  subject   String
  body      String
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation("Template", fields: [userId], references: [id])
  userId String @map("user_id") @db.ObjectId

  @@map("templates")
}
